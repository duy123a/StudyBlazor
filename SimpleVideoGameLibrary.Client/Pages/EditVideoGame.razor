@page "/videogame"
@page "/videogame/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (Id is null) {
	<PageTitle>Add a new video game</PageTitle>
	<h3>Add a new video game</h3>
}
else
{
	<PageTitle>Edit @game.Title</PageTitle>
	<h3>Edit @game.Title</h3>
}

<EditForm Model="game" OnSubmit="HandleSubmit">
	<div>
		<label for="title">Title</label>
		<InputText id="title" @bind-Value="game.Title" class="form-control" />
	</div>
	<div>
		<label for="publisher">Publisher</label>
		<InputText id="publisher" @bind-Value="game.Publisher" class="form-control" />
	</div>
	<div>
		<label for="releaseYear">Release Year</label>
		<InputNumber id="releaseYear" @bind-Value="game.ReleaseYear" class="form-control" />
	</div>
	<br />
	<button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@code {
	[Parameter]
	public int? Id { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		if (Id is not null)
		{
			var result = await Http.GetFromJsonAsync<VideoGame>($"http://localhost:5010/api/videogame/{Id}");
			if (result is not null)
			{
				game = result;
			}
		}
	}

	VideoGame game = new VideoGame { Title = "New Game" };

	async Task HandleSubmit()
	{
		if (Id is null)
		{
			await Http.PostAsJsonAsync("http://localhost:5010/api/videogame", game);
		}
		else
		{
			await Http.PutAsJsonAsync($"http://localhost:5010/api/videogame/{Id}", game);
		}
		NavigationManager.NavigateTo("/videogames");
	}
}
