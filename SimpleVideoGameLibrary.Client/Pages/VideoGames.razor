@page "/videogames"
@using SimpleVideoGameLibrary.Client.Abstraction
@using System.ComponentModel
@inject IVideoGamesViewModel ViewModel
<h3>Video Games</h3>

<button @onclick="ViewModel.AddVideoGame" class="btn btn-primary">Add Video Game</button>
<br />
@if (ViewModel.Games.Count <= 0)
{
	<span>Loading video games...</span>
}
else
{
	<QuickGrid Items="ViewModel.Games.AsQueryable()">
		<PropertyColumn Property="g => g.Title" />
		<PropertyColumn Property="g => g.Publisher" />
		<PropertyColumn Property="g => g.ReleaseYear" />
		<TemplateColumn>
			<button @onclick="(() => ViewModel.EditVideoGame(context.Id))" class="btn btn-primary">Edit</button>
		</TemplateColumn>
		<TemplateColumn>
			<button @onclick="(() => ViewModel.DeleteVideoGameAsync(context.Id))" class="btn btn-danger">Delete</button>
		</TemplateColumn>
	</QuickGrid>
}

@code {
	async void OnPropertyChangedHandler(object? sender, PropertyChangedEventArgs e)
	{
		await InvokeAsync(() =>
		{
			StateHasChanged();
		});
	}

	protected override async Task OnInitializedAsync()
	{
		ViewModel.PropertyChanged += OnPropertyChangedHandler;
		await ViewModel.OnInitializedAsync();
	}

	public void Dispose()
	{
		ViewModel.PropertyChanged -= OnPropertyChangedHandler;
	}
}
